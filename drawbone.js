// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.drawbone = {
    views: {},
    tools: {}
  };

  drawbone.views.Canvas = (function(_super) {
    __extends(Canvas, _super);

    function Canvas() {
      this.recordCanvasEvent = __bind(this.recordCanvasEvent, this);      _ref = Canvas.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Canvas.prototype.initialize = function(options) {
      this.initializeDom();
      this.initializeEventHandlers();
      this.initializeTools();
      if ((options != null) && (options.image_url != null)) {
        return this.drawImage(options.image_url);
      }
    };

    Canvas.prototype.render = function() {
      this.tools.render();
      return this;
    };

    Canvas.prototype.initializeEventHandlers = function() {
      return this.temporaryCanvas.bind('mousedown mousemove mouseup', this.recordCanvasEvent);
    };

    Canvas.prototype.initializeTools = function() {
      this.tools = new drawbone.views.Tools({
        el: this.toolbar,
        canvas: $(this.temporaryCanvas)[0],
        compositeCanvas: $(this.compositeCanvas)[0]
      });
      return this.tools.on('toolDidCompleteDrawing', this.toolDidCompleteDrawing, this);
    };

    Canvas.prototype.drawImage = function(image_url) {
      var image,
        _this = this;

      image = new Image();
      image.onload = function() {
        _this.compositeContext = _this.compositeCanvas.getContext('2d');
        return _this.compositeContext.drawImage(image, 0, 0);
      };
      return image.src = image_url;
    };

    Canvas.prototype.clear = function() {
      this.compositeContext = this.compositeCanvas.getContext('2d');
      return this.compositeContext.clearRect(0, 0, this.compositeCanvas.width, this.compositeCanvas.height);
    };

    Canvas.prototype.initializeDom = function() {
      var id_root;

      id_root = this.$el.attr('id');
      this.toolbar = $("<div id='" + id_root + "_drawbone_tools' />");
      this.toolbar.appendTo(this.$el);
      this.drawTemporaryCanvas(id_root);
      return this.drawCompositeCanvas(id_root);
    };

    Canvas.prototype.drawTemporaryCanvas = function(id) {
      this.temporaryCanvas = $("<canvas />");
      this.temporaryCanvas.attr('id', "" + id + "_temporary_canvas");
      return this.temporaryCanvas.appendTo(this.$el);
    };

    Canvas.prototype.drawCompositeCanvas = function(id) {
      this.compositeCanvas = $("<canvas />");
      this.compositeCanvas.attr('id', "" + id + "_composite_canvas");
      return this.compositeCanvas.appendTo(this.$el);
    };

    Canvas.prototype.drawingToolSelected = function(selection) {
      return this.selectedTool = selection;
    };

    Canvas.prototype.toolDidCompleteDrawing = function() {
      this.compositeContext = this.compositeCanvas.getContext('2d');
      this.temporaryContext = this.temporaryCanvas.getContext('2d');
      this.compositeContext.drawImage(this.temporaryCanvas, 0, 0);
      return this.temporaryContext.clearRect(0, 0, this.temporaryCanvas.width, this.temporaryCanvas.height);
    };

    Canvas.prototype.recordCanvasEvent = function(event) {
      if (event.layerX || event.layerX === 0) {
        event._x = event.layerX;
        event._y = event.layerY;
      } else if (event.offsetX || event.offsetX === 0) {
        event._x = event.offsetX;
        event._y = event.offsetY;
      }
      return this.tools.trigger('canvasEvent', event);
    };

    return Canvas;

  })(Backbone.View);

}).call(this);
