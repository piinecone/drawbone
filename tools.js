// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  drawbone.views.Tools = (function(_super) {
    __extends(Tools, _super);

    function Tools() {
      _ref = Tools.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Tools.prototype.events = {
      'click a[data-tool]': 'onToolSelected'
    };

    Tools.prototype.initialize = function(options) {
      this.canvas = options.canvas;
      this.compositeCanvas = options.compositeCanvas;
      return this.on('canvasEvent', this.canvasEvent, this);
    };

    Tools.prototype.displayDrawingTools = function() {
      var text;

      text = $("<a data-tool='text'>text</a>");
      return text.appendTo(this.$el);
    };

    Tools.prototype.initializeTools = function() {
      this.pencil = new applesauce.views.CanvasPencilTool({
        canvas: this.canvas
      });
      this.rectangle = new applesauce.views.CanvasRectangleTool({
        canvas: this.canvas
      });
      this.line = new applesauce.views.CanvasLineTool({
        canvas: this.canvas
      });
      this.text = new applesauce.views.CanvasTextTool({
        canvas: this.canvas
      });
      this.eraser = new applesauce.views.CanvasEraserTool({
        canvas: this.compositeCanvas
      });
      return this.textInput = new applesauce.views.CanvasTextInputView;
    };

    Tools.prototype.render = function() {
      this.displayDrawingTools();
      return this;
    };

    Tools.prototype.registerToolTriggers = function() {
      this.pencil.on('toolDidCompleteDrawing', this.toolDidCompleteDrawing, this);
      this.rectangle.on('toolDidCompleteDrawing', this.toolDidCompleteDrawing, this);
      this.line.on('toolDidCompleteDrawing', this.toolDidCompleteDrawing, this);
      this.eraser.on('toolDidCompleteDrawing', this.toolDidCompleteDrawing, this);
      this.text.on('shouldDisplayTextInput', this.shouldDisplayTextInput, this);
      this.text.on('toolDidCompleteDrawing', this.toolDidCompleteDrawing, this);
      return this.textInput.on('didEnterText', this.toolDidEnterText, this);
    };

    Tools.prototype.onToolSelected = function(event) {
      var selection;

      selection = $(event.target).data('tool');
      return this.currentTool = this.currentToolForSelection(selection);
    };

    Tools.prototype.currentToolForSelection = function(selection) {
      switch (selection) {
        case 'pencil':
          return this.pencil;
        case 'rectangle':
          return this.rectangle;
        case 'line':
          return this.line;
        case 'text':
          return this.text;
        case 'eraser':
          return this.eraser;
      }
    };

    Tools.prototype.toolDidCompleteDrawing = function() {
      return this.trigger('toolDidCompleteDrawing');
    };

    Tools.prototype.shouldDisplayTextInput = function() {
      return this.textInput.render();
    };

    Tools.prototype.toolDidEnterText = function(text) {
      return this.text.didEnterText(text);
    };

    Tools.prototype.canvasEvent = function(event) {
      return this.currentTool[event.type](event);
    };

    return Tools;

  })(Backbone.View);

}).call(this);
